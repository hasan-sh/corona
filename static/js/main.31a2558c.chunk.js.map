{"version":3,"sources":["constants.js","Countries.js","Map.js","General.js","App.js","serviceWorker.js","index.js"],"names":["icons","Add","forwardRef","props","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","getColumns","all","columns","title","field","render","rowData","tableData","id","country","type","defaultSort","cases","toLocaleString","todayCases","sorting","width","style","verticalAlign","src","countryInfo","flag","alt","data","updated","Date","toLocaleTimeString","Countries","countries","options","search","headerStyle","backgroundColor","color","pageSize","Map","useState","loaded","setLoaded","height","display","flexDirection","onClick","className","sandbox","allowFullScreen","AllCases","paging","covid","NovelCovid","fetch_data","App","React","setData","load","then","prevState","catch","console","error","sort","a","b","useEffect","setInterval","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.31a2558c.chunk.js","sourcesContent":["import React, { forwardRef } from 'react';\n\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\n\nexport const icons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => (\n    <ChevronRight {...props} ref={ref} />\n  )),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => (\n    <ChevronLeft {...props} ref={ref} />\n  )),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nexport function getColumns(all) {\n  let columns = [\n    {\n      title: 'Country',\n      field: 'country',\n      render: rowData => (\n        <div>\n          <span>{rowData.tableData.id + 1} - </span>\n          <span>{rowData.country}</span>\n        </div>\n      ),\n    },\n    {\n      title: 'Cases',\n      field: 'cases',\n      type: 'numeric',\n      defaultSort: 'desc',\n      render: rowData => <strong>{rowData.cases.toLocaleString()}</strong>,\n    },\n    {\n      title: 'Cases Today',\n      field: 'todayCases',\n      render: rowData => <span>+{rowData.todayCases.toLocaleString()}</span>,\n    },\n    { title: 'Deaths', field: 'deaths', type: 'numeric' },\n    { title: 'Deaths Today', field: 'todayDeaths', type: 'numeric' },\n    { title: 'Recovered', field: 'recovered', type: 'numeric' },\n    { title: 'Active', field: 'active', type: 'numeric' },\n    {\n      title: 'Flag',\n      field: 'countryInfo.flag',\n      type: 'string',\n      sorting: false,\n      render: rowData => (\n        <img\n          width=\"35\"\n          style={{\n            verticalAlign: 'middle',\n          }}\n          src={rowData.countryInfo.flag}\n          alt={`Country ${rowData.country}`}\n        />\n      ),\n    },\n  ];\n  if (all) {\n    columns = [\n      { title: 'Cases', field: 'cases', type: 'numeric' },\n      { title: 'Deaths', field: 'deaths', type: 'numeric' },\n      { title: 'Recovered', field: 'recovered', type: 'numeric' },\n      {\n        title: 'Updated',\n        field: 'updated',\n        render: data => (\n          <span>\n            {data.updated ? new Date(data.updated).toLocaleTimeString() : ''}\n          </span>\n        ),\n      },\n    ];\n  }\n\n  return columns;\n}\n","import React  from 'react';\nimport * as covid from 'novelcovid';\nimport MaterialTable from 'material-table';\nimport { getColumns, icons } from './constants';\n\nexport default function Countries(props) {\n  return (\n    <MaterialTable\n      title=\"Cases throughout all Countries\"\n      columns={getColumns()}\n      data={props.countries}\n      icons={icons}\n      options={{\n        search: true,\n        headerStyle: {\n          backgroundColor: '#01579b',\n          color: '#FFF',\n        },\n        pageSize: 20,\n      }}\n    />\n  );\n}\n","import React, { useState } from 'react';\n\nconst containerStyle = () => ({\n  height: '50vh',\n  display: 'flex',\n  flexDirection: 'column',\n});\n\nexport default function Map() {\n  const [loaded, setLoaded] = useState(false);\n\n  return (\n    <div style={loaded ? containerStyle() : {}}>\n      <button onClick={() => setLoaded(!loaded)}>\n        {loaded ? 'Hide Map' : 'Show Map'}\n      </button>\n      {loaded ? (\n        <iframe\n          title=\"Corona map WHO.\"\n          className=\"iframe-widget_3\"\n          sandbox=\"allow-scripts allow-same-origin allow-forms allow-popups allow-presentation\"\n          allowFullScreen={true}\n          src=\"https://who.maps.arcgis.com/apps/opsdashboard/index.html#/31ba38ba24924aaeb940f15b5e95a1e6\"\n          // frameBorder=\"0\"\n          style={{\n            display: loaded ? 'inherit' : 'none',\n            width: '100%',\n            height: '100%',\n          }}\n        ></iframe>\n      ) : null}\n    </div>\n  );\n}\n","import React from 'react'\nimport MaterialTable from 'material-table';\nimport { getColumns, icons } from './constants';\n\n\nexport default function AllCases(props) {\n  return (\n    <MaterialTable\n      title=\"Cases overall\"\n      columns={getColumns(true)}\n      data={[props.all]}\n      icons={icons}\n      options={{\n        search: false,\n        headerStyle: {\n          backgroundColor: '#01579b',\n          color: '#FFF',\n        },\n        pageSize: 1,\n        paging: false,\n      }}\n    />\n  );\n};","import React from 'react';\nimport { NovelCovid } from 'novelcovid';\nimport './App.css';\n\n// Components\nimport Countries from './Countries';\nimport Map from './Map';\nimport AllCases from './General';\n\nconst covid = new NovelCovid()\n\nfunction fetch_data(countries) {\n  return countries ? covid.countries() : covid.all();\n}\n\nfunction App() {\n  const [data, setData] = React.useState({});\n  function load() {\n    fetch_data()\n      .then(all => setData(prevState => ({ ...prevState, all })))\n      .catch(console.error);\n    fetch_data(true)\n      .then(data => data.sort((a, b) => (a.cases > b.cases ? -1 : 1)))\n      .then(countries => setData(prevState => ({ ...prevState, countries })))\n      .catch(console.error);\n  }\n  React.useEffect(() => {\n    setInterval(load, 1000 * 10 * 60);\n    load();\n    return () => load;\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"item\">\n        <Map />\n      </div>\n      <div className=\"item\">\n        <AllCases all={data.all || {}} />\n      </div>\n      <Countries countries={data.countries} />\n      <button onClick={load}>Reload</button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}